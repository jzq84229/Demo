apply plugin: 'com.android.application'

//File propFile = file('signing.properties');
//if (propFile.exists()) {
//    def Properties props = new Properties()
//    props.load(new FileInputStream(propFile))
//    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
//            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
//        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
//        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
//        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
//        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
//    } else {
//        android.buildTypes.release.signingConfig = null
//    }
//} else {
//    android.buildTypes.release.signingConfig = null
//}

// 定义一个打包时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


Properties props = new Properties();
props.load(project.rootProject.file('signing.properties').newDataInputStream())

def cfg = rootProject.ext.android
def dependencie = rootProject.ext.dependencies
android {
    // 编译SDK的版本
    compileSdkVersion cfg.compileSdkVersion
    // build tools的版本
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        // 应用的包名
        applicationId "com.zhang.mydemo"
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode 1
        versionName "1.0"
        // java版本
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    // 移除lint检查的error
    lintOptions {
        abortOnError false
    }



    signingConfigs {
        debug {

        }

        demo {
            keyAlias props.getProperty("KEY_ALIAS")
            keyPassword props.getProperty("KEY_PASSWORD")
            storeFile file(props.getProperty("STORE_FILE"))
            storePassword props.getProperty("STORE_PASSWORD")
        }
        release {
            keyAlias props.getProperty("KEY_ALIAS")
            keyPassword props.getProperty("KEY_PASSWORD")
            storeFile file(props.getProperty("STORE_FILE"))
            storePassword props.getProperty("STORE_PASSWORD")
        }
    }

    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"

            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        demo {
            // 显示Log
            buildConfigField("boolean", "LOG_DEBUG", "true")

            versionNameSuffix "-demo"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.demo
        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"

            versionNameSuffix "-release"
            // 是否进行混淆
            minifyEnabled false
            // 压缩对齐生成的apk包
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false
            // 指定混淆规则，需要压缩优化的混淆要把proguard-android.txt换成proguard-android.txt
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 指定打release包的签名
            signingConfig signingConfigs.release
            // 启用multidex的支持
//            multiDexEnabled true

//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        // 输出apk名称为boohee_v1.0_2015-01-15_wandoujia.apk
//                        def fileName = "mydemo_v${defaultConfig.versionName}_release_${releaseTime()}_${variant.productFlavors[0].name}.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputFile.parent);
//                    def fileName
//                    if (variant.buildType.name == "release") {
//                        fileName = "AuroraGrowRefactorV2_${defaultConfig.versionName}_release_${releaseTime()}.apk"
//                    } else if (variant.buildType.name == "demo"){
//                        fileName = "AuroraGrowRefactorV2_${defaultConfig.versionName}_demo_${releaseTime()}.apk"
//                    } else {
//                        fileName = "AuroraGrowRefactorV2_${defaultConfig.versionName}_debug_${releaseTime()}.apk"
//                    }
                def fileName = "AuroraGrowRefactorV2_${defaultConfig.versionName}_${variant.buildType.name}_${releaseTime()}.apk"
                output.outputFile = new File(outputDirectory, fileName)
            }
        }
    }


/*
    // 这里是为了不同过的版本设置一些特殊的参数，并不直接和 buildType 关联。
    // 例如：使用 buildType 中的 dev 版本，也可以使用 flavors_release 里面设置的自定义参数。这需要自己按照需求制定。
    productFlavors{

        // 自定义名字不过不能和上面buildType中相同，不然Gradle编译会不通过。在这里使用了『flavors_』前缀以便区分。
        flavors_release{
            // manifestPlaceholders中写到的『str』，『package_name』不支持用大写，否则Gradle编译会不通过。
            // 这里所设置的变量可以直接使用在『AndroidManifest.xml』中，使用方式为：${package_name}
            // android:label="${package_name}"
            manifestPlaceholders = [str:"releaseStr", package_name: "com.zhang.demo.release"]

            // 这里的参数是为了在 java 代码中使用，具体的使用方式为：context.getResources().getString(R.string.strKey);
            resValue("string", "strKey", "releaseStrValue")
        }

        flavors_dev{
            manifestPlaceholders = [str:"devStr",package_name:"com.zhang.demo.dev"]

            resValue("string" , "strKey","devStrValue")
        }
    }
*/

    // 友盟多渠道打包
    productFlavors {
        wandoujia {}
//        _360 {}
//        baidu {}
//        xiaomi {}
//        tencent {}
//        taobao {}
    }
//
//    productFlavors.all { flavor ->
//        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }


}


dependencies {
    // 编译libs目录下的所有jar包
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // 编译extras目录下的ShimmerAndroid模块

    compile dependencie.appcompatV7
    compile dependencie.design
    compile dependencie.cardview
    compile dependencie.recyclerview
    compile dependencie.stickygridheaders
    compile dependencie.imageLoader
    compile dependencie.okhttp
    compile dependencie.androidGifDrawable
    compile dependencie.pdfviewer
//    compile 'com.github.barteksc:android-pdf-viewer:2.6.1'
//    compile 'pl.droidsonroids.gif:android-gif-drawable:1.1.+'
    compile project(':ComProject:PullToRefreshLib')
    compile project(':ComProject:ZXingLib')
}


